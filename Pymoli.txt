Note
Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.
# Dependencies and Setup
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
​
# File to Load (Remember to Change These)
file_to_load = "Resources/purchase_data.csv"
​
# Read Purchasing File and store into Pandas data frame
purchase_data = pd.read_csv(file_to_load)
purchase_data.head()
Purchase ID	SN	Age	Gender	Item ID	Item Name	Price
0	0	Lisim78	20	Male	108	Extraction, Quickblade Of Trembling Hands	3.53
1	1	Lisovynya38	40	Male	143	Frenzied Scimitar	1.56
2	2	Ithergue48	24	Male	92	Final Critic	4.88
3	3	Chamassasya86	24	Male	100	Blindscythe	3.27
4	4	Iskosia90	23	Male	131	Fury	1.44
Player Count
Display the total number of players
# Calculate the total players
total_players = len(purchase_data["SN"].value_counts())
​
# Create DF for Total Players to display
player_count = pd.DataFrame({"Total Players":[total_players]})
player_count
Total Players
0	576
Purchasing Analysis (Total)
Run basic calculations to obtain number of unique items, average price, etc.
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame
# Number of Unique Items
item_count = len(purchase_data["Item ID"].unique())
​
# Average Purchase Price
average_price_df = purchase_data["Price"].mean()
​
# Total Number of Purchases
total_purchases_df = purchase_data["Price"].count()
total_purchases_df
​
# Total Revenue
total_revenue_df = purchase_data["Price"].sum()
​
# Create data frame
purchasing_analysis_df = pd.DataFrame({ "Number of Unique Items" : [item_count],
                                        "Average Price" : [round(average_price_df, 2)],
                                        "Total Number of Purchases" : [total_purchases_df],
                                        "Total Revenue" : [total_revenue_df]})
​
# Presenting the data  
purchasing_analysis_df ["Average Price"] = purchasing_analysis_df["Average Price"].map("${:,.2f}".format)
purchasing_analysis_df ["Total Number of Purchases"] = purchasing_analysis_df["Total Number of Purchases"].map("{:,}".format)
purchasing_analysis_df ["Total Revenue"] = purchasing_analysis_df["Total Revenue"].map("${:,.2f}".format)
purchasing_analysis_df = purchasing_analysis_df.loc[:,["Number of Unique Items", "Average Price", "Total Number of Purchases", "Total Revenue"]]
purchasing_analysis_df
Number of Unique Items	Average Price	Total Number of Purchases	Total Revenue
0	183	$3.05	780	$2,379.77
Gender Demographics
Percentage and Count of Male Players
Percentage and Count of Female Players
Percentage and Count of Other / Non-Disclosed
# Drop duplicate players names 
no_duplicate_players = purchase_data.drop_duplicates(['SN'], keep ='last')
​
# Count and percentage of Male Players
male_df = purchase_data.loc[purchase_data["Gender"] == "Male",:]
male_count = len(male_df["SN"].unique())
percent_male = round((len(male_df)/len(purchase_data)) * 100, 2)
​
# Count  and percentage of Female Players
female_df = purchase_data.loc[purchase_data["Gender"] == "Female",:]
female_count = len(female_df["SN"].unique())
percent_female = round((len(female_df)/len(purchase_data)) * 100, 2)
​
# Count and percentage of Other / Non-Disclosed
others_data_df = purchase_data.loc[purchase_data["Gender"] == "Other / Non-Disclosed",:]
others_count = len(others_data_df["SN"].unique())
percent_others = round((len(others_data_df)/len(purchase_data)) * 100, 2)
​
# Creating a total gender dataframe of counts and percentages
gender_demo_dict = {"Percentage Of Players" : [percent_male, percent_female, percent_others],
                    "Gender" : ["Male","Female","Other/Non-Disclosed"],
                    "Total Count" : [male_count, female_count, others_count]}
​
# Create as dataframe 
gender_demo_df = pd.DataFrame(gender_demo_dict)
​
# Present data frame 
gender_demo_df
Percentage Of Players	Gender	Total Count
0	83.59	Male	484
1	14.49	Female	81
2	1.92	Other/Non-Disclosed	11
Purchasing Analysis (Gender)
Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame
# Purchase Count of Males, Females, and Others/ Non-disclosed
male_purchase = len (male_df)
female_purchase = len (female_df)
others_purchase = len (others_data_df)
​
# Average Purchase Price of Males, Females, and Others/ Non-disclosed
average_price_male = round((male_df["Price"].sum())/len(male_df["Price"]),2)
average_price_female =round((female_df["Price"].sum())/len(female_df["Price"]),2)
average_price_others = round((others_data_df["Price"].sum())/len(others_data_df["Price"]),2)
​
# Total Purchase Value of Males, Females, and Others/ Non-disclosed
total_value_male = round(male_df["Price"].sum(),2)
total_value_female = round(female_df["Price"].sum(),2)
total_value_others = round(others_data_df["Price"].sum(),2)
​
# Normalized Totals of Males, Females, and Others/ Non-disclosed
normalized_male = round((total_value_male/male_count), 2)
normalized_female = round((total_value_female/female_count), 2)
normalized_others = round((total_value_others/others_count), 2)
​
#Creating a total purchasing analysis (gender) dataframe
purchasing_gender = {"Purchase Count" : [male_purchase, female_purchase, others_purchase],
                     "Gender" : ["Male","Female","Other/Non-Disclosed"],
                     "Average Purchase Price" : [average_price_male, average_price_female, average_price_others],
                     "Total Purchase Value" : [total_value_male, total_value_female,total_value_others ],
                     "Normalized Totals" : [normalized_male, normalized_female, normalized_others ]}
​
purchasing_gender_df = pd.DataFrame(purchasing_gender)
purchasing_gender_df = purchasing_gender_df.set_index("Gender")
​
# Presenting the data
purchasing_gender_df["Average Purchase Price"] = purchasing_gender_df["Average Purchase Price"].map("${:,.2f}".format)
purchasing_gender_df["Total Purchase Vale"] = purchasing_gender_df["Total Purchase Value"].map("${:,.2f}".format)
purchasing_gender_df ["Purchase Count"] = purchasing_gender_df["Purchase Count"].map("{:,}".format)
purchasing_gender_df["Normalized Totals"] = purchasing_gender_df["Normalized Totals"].map("${:,.2f}".format)
purchasing_gender_df = purchasing_gender_df.loc[:, ["Purchase Count", "Average Purchase Price", "Total Purchase Value", "Normalized Totals"]]
​
# Display the Gender Table
purchasing_gender_df
Purchase Count	Average Purchase Price	Total Purchase Value	Normalized Totals
Gender				
Male	652	$3.02	1967.64	$4.07
Female	113	$3.20	361.94	$4.47
Other/Non-Disclosed	15	$3.35	50.19	$4.56
Age Demographics
Establish bins for ages
Categorize the existing players using the age bins. Hint: use pd.cut()
Calculate the numbers and percentages by age group
Create a summary data frame to hold the results
Optional: round the percentage column to two decimal points
Display Age Demographics Table
#Create bins in which data will be held. Bins are <10, 10-14, 15-19, 20-24, 25-29, 30-34, 35-39 >39.
​
bins = [0,10,15,20,25,30,35,40, 45]
age_ranges = ["<10", "10-14","15-19", "20-24", "25-29", "30-34", "35-39", ">=40"]
​
# Cut purchase data and place the ages into bins
pd.cut(purchase_data["Age"], bins, labels=age_ranges)
​
purchase_data["Age Range"] = pd.cut(purchase_data["Age"], bins, labels= age_ranges)
purchase_data.head()
​
​
#Players percentage by age range.
​
age_group_percentage_df = round(purchase_data["Age Range"].value_counts()/780,2)
age_group_percentage_df
​
# Purchase count by age range.
​
age_group_count_df = purchase_data.groupby("Age Range")["Item Name"]
age_group_count_df.count()
​
# Average purchase price by age range.
​
age_group_average_df = purchase_data.groupby("Age Range")["Price"].mean()
age_group_average_df.round(2)
​
#Total purchase value by age range.
​
age_group_total_df = purchase_data.groupby("Age Range")["Price"].sum()
age_group_total_df
​
#Normalized totals by age range.
​
normalized_age_total_df = age_group_total_df/573
normalized_age_total_df.round(2)
​
# Convert to DataFrame.
​
age_range_df = pd.DataFrame({"Purchase Count":age_group_count_df,
                            "Average Purchase Price":age_group_average_df,
                            "Total Purchase Value": age_group_total_df,
                            "Normalized Totals": normalized_age_total_df
})
age_range_df
Purchase Count	Average Purchase Price	Total Purchase Value	Normalized Totals
Age Range				
<10	(<10, [Blood-Forged Skeletal Spine, Faith's Sc...	3.405000	108.96	0.190157
10-14	(10-14, [Demise, Extraction, Quickblade Of Tre...	2.900000	156.60	0.273298
15-19	(15-19, [Extraction, Quickblade Of Trembling H...	3.107800	621.56	1.084747
20-24	(20-24, [Final Critic, Blindscythe, Fury, Drea...	3.020431	981.64	1.713159
25-29	(25-29, [Blazefury, Protector of Delusions, Pe...	2.875584	221.42	0.386422
30-34	(30-34, [Ghastly Adamantite Protector, Bone Cr...	2.994423	155.71	0.271745
35-39	(35-39, [Frenzied Scimitar, Interrogator, Bloo...	3.404545	112.35	0.196073
>=40	(>=40, [Aetherius, Boon of the Blessed, Demise...	3.075714	21.53	0.037574
Purchasing Analysis (Age)
Bin the purchase_data data frame by age
Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below
Create a summary data frame to hold the results
Optional: give the displayed data cleaner formatting
Display the summary data frame
# Define age bins
age_bins = [0, 9.90, 14.90, 19.90, 24.90, 29.90, 34.90, 39.90, 99999]
group_names = ["<10", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40+"]
​
# Bin the Purchasing Data
purchase_data["Age Ranges"] = pd.cut(purchase_data["Age"], age_bins, labels=group_names)
​
# Run basic calculations
age_purchase_total = purchase_data.groupby(["Age Ranges"]).sum()["Price"].rename("Total Purchase Value")
age_average = purchase_data.groupby(["Age Ranges"]).mean()["Price"].rename("Average Purchase Price")
age_counts = purchase_data.groupby(["Age Ranges"]).count()["Price"].rename("Purchase Count")
​
# Calculate Normalized Purchasing
gender_count_df = purchase_data.groupby("Gender")["SN"].nunique()
gender_count_df.head()
​
# Gender Percentage
gender_percentage_df = gender_count_df/573
gender_percentage_df.round(2)
​
gender_demographics_df = pd.DataFrame({"Gender Count": gender_count_df,"Gender Percentage":gender_percentage_df})
gender_demographics_df
​
# Convert to a Purchasing Analysis (age) DataFrame
age_data = pd.DataFrame({"Purchase Count": age_counts, "Average Purchase Price": age_average, "Total Purchase Value": age_purchase_total, "Normalized Totals": gender_count_df})
​
# Presenting the Data
age_data["Average Purchase Price"] = age_data["Average Purchase Price"].map("${:,.2f}".format)
age_data["Total Purchase Value"] = age_data["Total Purchase Value"].map("${:,.2f}".format)
age_data ["Purchase Count"] = age_data["Purchase Count"].map("{:,}".format)
age_data["Normalized Totals"] = age_data["Normalized Totals"].map("${:,.2f}".format)
age_data = age_data.loc[:, ["Purchase Count", "Average Purchase Price", "Total Purchase Value", "Normalized Totals"]]
​
# Display the Age Table
age_data
Purchase Count	Average Purchase Price	Total Purchase Value	Normalized Totals
10-14	28.0	$2.96	$82.78	$nan
15-19	136.0	$3.04	$412.89	$nan
20-24	365.0	$3.05	$1,114.06	$nan
25-29	101.0	$2.90	$293.00	$nan
30-34	73.0	$2.93	$214.00	$nan
35-39	41.0	$3.60	$147.67	$nan
40+	13.0	$2.94	$38.24	$nan
<10	23.0	$3.35	$77.13	$nan
Female	nan	$nan	$nan	$81.00
Male	nan	$nan	$nan	$484.00
Other / Non-Disclosed	nan	$nan	$nan	$11.00
Top Spenders
Run basic calculations to obtain the results in the table below
Create a summary data frame to hold the results
Sort the total purchase value column in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the summary data frame
# Calculate Total purchase value
user_total = purchase_data.groupby(["SN"]).sum()["Price"]
​
# Calculate average purchase price
user_average = purchase_data.groupby(["SN"]).mean()["Price"]
​
# Calculate puchase count 
user_count = purchase_data.groupby(["SN"]).count()["Price"]
​
# Creating a dictionary of top spenders
top_spenders_dict = {"SN" : user_average,
                     "Purchase Count" : user_count,
                     "Average Purchase Price" : user_average,
                     "Total Purchase Value": user_total}
​
# Create a dataframe for Top 5 Spenders
top_spenders_df = pd.DataFrame(top_spenders_dict)
top_spenders_df = top_spenders_df.set_index("SN")
top_spenders_df = top_spenders_df.sort_values("Total Purchase Value",ascending=False)
​
# Presenting the Data
top_spenders_df["Average Purchase Price"] = top_spenders_df["Average Purchase Price"].map("${:,.2f}".format)
top_spenders_df["Total Purchase Value"] = top_spenders_df["Total Purchase Value"].map("${:,.2f}".format)
top_spenders_df= top_spenders_df.loc[:,["Purchase Count", "Average Purchase Price", "Total Purchase Value"]]
​
#Display the head of the dataframe
top_spenders_df.head()
Purchase Count	Average Purchase Price	Total Purchase Value
SN			
3.792000	5	$3.79	$18.96
3.862500	4	$3.86	$15.45
4.610000	3	$4.61	$13.83
3.405000	4	$3.40	$13.62
4.366667	3	$4.37	$13.10
Most Popular Items
Retrieve the Item ID, Item Name, and Item Price columns
Group by Item ID and Item Name. Perform calculations to obtain purchase count, item price, and total purchase value
Create a summary data frame to hold the results
Sort the purchase count column in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the summary data frame
# Extract item Data
item_data = purchase_data.loc[:,["Item ID", "Item Name", "Price"]]
​
# Perform calculations 
total_item_purchase = item_data.groupby(["Item ID", "Item Name"]).sum()["Price"]
average_item_purchase = item_data.groupby(["Item ID", "Item Name"]).mean()["Price"]
item_count = item_data.groupby(["Item ID", "Item Name"]).count()["Price"]
​
# Create new DataFrame
item_data_pd = pd.DataFrame({"Total Purchase Value": total_item_purchase, 
                             "Item Price": average_item_purchase, 
                             "Purchase Count": item_count})
​
# Sort Values
item_data_count_sorted = item_data_pd.sort_values("Purchase Count", ascending = False)
​
# Present the data
item_data_count_sorted["Item Price"] = item_data_count_sorted["Item Price"].map("${:,.2f}".format)
item_data_count_sorted["Purchase Count"] = item_data_count_sorted["Purchase Count"].map("{:,}".format)
item_data_count_sorted["Total Purchase Value"] = item_data_count_sorted["Total Purchase Value"].map("${:,.2f}".format)
item_popularity = item_data_count_sorted.loc[:,["Purchase Count", "Item Price", "Total Purchase Value"]]
​
# Display the head of the data 
item_popularity.head()
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
145	Fiery Glass Crusader	9	$4.58	$41.22
108	Extraction, Quickblade Of Trembling Hands	9	$3.53	$31.77
82	Nirvana	9	$4.90	$44.10
19	Pursuit, Cudgel of Necromancy	8	$1.02	$8.16
Most Profitable Items
Sort the above table by total purchase value in descending order
Optional: give the displayed data cleaner formatting
Display a preview of the data frame
# Item Table (Sorted by Total Purchase Value)
item_total_purchase = item_data_pd.sort_values("Total Purchase Value", ascending = False)
​
# Presenting the data
item_total_purchase["Item Price"] = item_total_purchase["Item Price"].map("${:,.2f}".format)
item_total_purchase["Purchase Count"] = item_total_purchase["Purchase Count"].map("{:,}".format)
item_total_purchase["Total Purchase Value"] = item_total_purchase["Total Purchase Value"].map("${:,.2f}".format)
item_profitable = item_total_purchase.loc[:,["Purchase Count", "Item Price", "Total Purchase Value"]]
​
# Display the head of the data 
item_profitable.head()
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
82	Nirvana	9	$4.90	$44.10
145	Fiery Glass Crusader	9	$4.58	$41.22
92	Final Critic	8	$4.88	$39.04
103	Singed Scalpel	8	$4.35	$34.80